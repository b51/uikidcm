--Darwin OP Commmanager for NSL 2011
module(..., package.seeall);

--Added for Hardware config file
local cwd = unix.getcwd();
package.path = cwd.."/../Config/?.lua;"..package.path;
require('DspCode');
require('unix');
require('shm');
require('carray');
require('vector');
require('Config');
require('Transform')


--传递的参数
--速度
gait_direction_valid=1;
--特殊步态
special_gait_valid=1;
--运动复位
gait_reset_valid=1;
--路程记清零
copy_reset_odometer=1;
--头部运动指令有效
head_move_valid=1;
--舵机给力
torque_enable_valid=1;
--传感器，永远置1
sensor_enable_valid=1;
--行进踢球
walk_kick_valid=1;

ctrReg1=1;
ctrReg2=1;

SpecialGaitCommand={[id]=0,[times]=0};
HeadMovingCommand={[pitch]=0,[yaw]=0};
GaitEffect={[xOffset]=0,[yOffset]=0,[thetaOffset]=0};
Sensors={};
OdometerRecord={[flag]=1,[gaitEffect]=GaitEffect};
--传值函数
function pass_state(data1,data2,data3,data4,data5,data6,data7)
 DspCode.pass_state(data1,data2,data3,data4,data5,data6,data7);
end
function pass_velocity(data1,data2,data3)
 DspCode.pass_velocity(data1,data2,data3);
end
function pass_headpos(data1,data2)
 DspCode.pass_headpos(data1,data2);
end
function pass_gaitid(data1,data2)
 DspCode.pass_gaitid(data1,data2)
 end
 function pass_kicktype(data1)
  DspCode.pass_kicktype(data1);
 end
 --取值函数
function get_gaitValid()
 return DspCode.get_gaitValid();
end
function get_specialValid()
 return DspCode.get_specialValid();
end
function get_gaitReset()
 return DspCode.get_gaitRest();
end
function get_odemeterReset()
 return DspCode.get_odomederReset();
end
function get_headValid()
 return DspCode.get_headValid();
end
function get_torqueEnable()
 return DspCode.get_torqueEnable();
end
function get_sensorEnable()
 return DspCode.get_sensorEnable();
end
function get_velocity()
 return DspCode.get_velicity();
end
function get_headPos()
 return DspCode.get_headPos();
end
function get_gaitid()
 return DspCode.get_gaitid();
end
function get_kicktype()
 return get_kicktype();
end

-- Setup shared memory
function shm_init()
  shm.destroy('dcmSensor');
  sensorShm = shm.new('dcmSensor');
  sensorShm.time = vector.zeros(1);
  sensorShm.count = vector.zeros(1);
  sensorShm.position = vector.zeros(nJoint);
  sensorShm.servoposition = vector.zeros(nJoint);
  sensorShm.button = vector.zeros(2); --OP has TWO buttons

  sensorShm.imuAngle = vector.zeros(3);
  sensorShm.imuAcc = vector.zeros(3);
  sensorShm.imuGyr = vector.zeros(3);
  sensorShm.imuAccRaw = vector.zeros(3);
  sensorShm.imuGyrRaw = vector.zeros(3);
  sensorShm.imuGyrBias=vector.zeros(3); --rate gyro bias
  sensorShm.temperature=vector.zeros(nJoint);
  sensorShm.battery=vector.zeros(1); --Now only use cm730 value
  sensorShm.updatedCount =vector.zeros(1);   --Increases at every cycle

  shm.destroy('dcmActuator');
  actuatorShm = shm.new('dcmActuator');
  print(nJoint)
  actuatorShm.command = vector.zeros(nJoint);
  actuatorShm.velocity = vector.zeros(nJoint);
  actuatorShm.hardness = vector.zeros(nJoint);
  actuatorShm.offset = vector.zeros(nJoint); --in rads
  actuatorShm.bias = vector.zeros(nJoint); --in clicks
  actuatorShm.led = vector.zeros(1);

  actuatorShm.torqueEnable = vector.zeros(1); --Global torque on.off
  -- Gain 0: normal gain 1: Kick gain (more stiff)
  actuatorShm.gain=vector.zeros(nJoint); 
  actuatorShm.gainChanged=vector.ones(1);  --set compliance once
  actuatorShm.velocityChanged=vector.zeros(1);
  actuatorShm.hardnessChanged=vector.zeros(1);
  actuatorShm.torqueEnableChanged=vector.zeros(1);

  actuatorShm.backled = vector.zeros(3);  --red blue green
  actuatorShm.eyeled = vector.zeros(3);   --RGB15 eye led
  actuatorShm.headled = vector.zeros(3);  --RGB15 head led
  actuatorShm.headledChanged = vector.zeros(1);

  --Dummy variable (for compatibility with nao)
  actuatorShm.ledFaceRight=vector.zeros(24);
  actuatorShm.ledFaceLeft=vector.zeros(24);
  actuatorShm.ledChest=vector.zeros(24);

  --New PID parameters variables
  --Default value is (32,0,0)
  actuatorShm.p_param=vector.ones(nJoint)*32; 
  actuatorShm.i_param=vector.ones(nJoint)*0; 
  actuatorShm.d_param=vector.ones(nJoint)*0; 

  --SJ: list of servo IDs to read
  --0: Head only 1: All servos 2: Head+Leg
  --readID: 1 for readable, 0 for non-readable
  actuatorShm.readType=vector.zeros(1);   
  actuatorShm.readID=vector.zeros(nJoint); 

  --SJ: battery testing mode (read voltage from all joints)
  actuatorShm.battTest=vector.zeros(1);   
end

function entry()
  unix.usleep(200000);
  -- Dynamixel.ping_probe();
  shm_init();
  carray_init();
  -- Read head and not legs
  actuator.readType[1]=1;
  -- Read only kankles
  actuator.readType[1]=3;

  -- Read initial leg bias from config
  for i=1,12 do 	
    actuator.bias[i+5]=legBias[i];
  end

  --Setting arm bias
  for i=1,3 do
    actuator.offset[i+2]=armBias[i];
  end
  for i=4,6 do
    actuator.offset[i+14]=armBias[i];
  end
  --传值
  pass_state(gait_direction_valid,
						special_gait_valid,
						gait_reset_valid,
						copy_reset_odometer,
						head_move_valid,
						torque_enable_valid,
						sensor_enable_valid,
						walk_kick_valid)
 DspCode.enter_entry();
end

-- Setup CArray mappings into shared memory
function carray_init()
  sensor = {};
  for k,v in sensorShm.next, sensorShm do
    sensor[k] = carray.cast(sensorShm:pointer(k));
  end

  actuator = {};
  for k,v in actuatorShm.next, actuatorShm do
    actuator[k] = carray.cast(actuatorShm:pointer(k));
  end
end


function update()
 DspCode.dsp_thread();
 gait_direction_valid=get_gaitValid();
end

function exit()
end

